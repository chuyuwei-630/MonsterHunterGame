class MapSystem {
private:
    static const int SIZE = 5;
    string grid[SIZE][SIZE];
    map<string, Diamond*> diamondMap;

    Diamond* getRandomDiamond() {
        int r = rand() % 6;
        switch (r) {
            case 0: return new HealDiamond();
            case 1: return new TrapDiamond();
            case 2: return new ExpDiamond();
            case 3: return new GoldDiamond();
            case 4: return new EmptyDiamond();
            case 5: return new LevelUpDiamond();
        }
        return new EmptyDiamond();
    }

public:
    void generateMap() {
        diamondMap.clear();
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                grid[i][j] = "[ ]";

        for (int i = 0; i < 5; i++) {
            int x, y;
            do {
                x = rand() % SIZE;
                y = rand() % SIZE;
            } while (grid[x][y] != "[ ]");

            grid[x][y] = "[💎]";
            string key = to_string(x) + "," + to_string(y);
            diamondMap[key] = getRandomDiamond();
        }
    }

    void displayMap() {
        cout << "🗺 地圖：" << endl;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++)
                cout << grid[i][j] << " ";
            cout << endl;
        }
    }

    void chooseDiamond(Player &player, int x, int y) {
        string key = to_string(x) + "," + to_string(y);
        if (diamondMap.find(key) != diamondMap.end()) {
            Diamond* d = diamondMap[key];
            cout << "🎯 你選擇了：" << d->name << endl;
            d->applyEffect(player);
            delete d;
            diamondMap.erase(key);
            grid[x][y] = "[✓]";
        } else {
            cout << "❌ 此處沒有鑽石或已被選取！" << endl;
        }
    }
};
